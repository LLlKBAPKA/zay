import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
START, EXPERIENCE, TIME_PER_DAY, MOTIVATION = range(4)

class BotApplication:
    def __init__(self):
        self.app = Application.builder().token(TOKEN).build()
        self._setup_handlers()
        self.restart_count = 0
        self.max_restarts = 3

    def _setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self._start),
                CallbackQueryHandler(self._apply, pattern="^apply$")
            ],
            states={
                EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._experience)],
                TIME_PER_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._time_per_day)],
                MOTIVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._motivation)],
            },
            fallbacks=[CommandHandler('cancel', self._cancel)],
            per_message=True
        )

        self.app.add_handler(conv_handler)
        self.app.add_handler(CallbackQueryHandler(self._admin_action, pattern=r"^(accept|reject)_\d+$"))
        self.app.add_handler(CommandHandler('cancel', self._cancel))
        self.app.add_error_handler(self._error_handler)

    async def _start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        keyboard = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply")]]
        await update.message.reply_text(
            "üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return START

    async def _apply(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("üíº –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
        return EXPERIENCE

    async def _experience(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data['experience'] = update.message.text[:100]
        await update.message.reply_text("‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ? (–¶–∏—Ñ—Ä–∞)")
        return TIME_PER_DAY

    async def _time_per_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        try:
            hours = float(update.message.text.replace(',', '.'))
            context.user_data['time_per_day'] = f"{hours} —á."
        except ValueError:
            context.user_data['time_per_day'] = update.message.text[:50]
        
        await update.message.reply_text("üéØ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã? (–ö—Ä–∞—Ç–∫–æ)")
        return MOTIVATION

    async def _motivation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data['motivation'] = update.message.text[:300]
        user = update.effective_user

        application_text = (
            "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user.username or '–Ω–µ—Ç'}\n"
            f"üÜî *ID:* `{user.id}`\n"
            f"üìù *–ò–º—è:* {user.full_name}\n\n"
            f"üíº *–û–ø—ã—Ç:* {context.user_data.get('experience', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚è≥ *–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:* {context.user_data.get('time_per_day', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üéØ *–¶–µ–ª—å:* {context.user_data.get('motivation', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

        for admin_id in ADMIN_CHAT_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=application_text,
                    parse_mode="Markdown",
                    reply_markup=self._get_admin_keyboard(user.id)
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
        return ConversationHandler.END

    def _get_admin_keyboard(self, applicant_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{applicant_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{applicant_id}")
            ]
        ])

    async def _admin_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        query = update.callback_query
        await query.answer()
        
        try:
            action, user_id = query.data.split('_')
            user_id = int(user_id)
            
            response_text = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è." if action == "accept" else "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
            await context.bot.send_message(chat_id=user_id, text=response_text)
            await query.edit_message_reply_markup()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    async def _error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)

    async def run(self):
        while self.restart_count < self.max_restarts:
            try:
                await self.app.initialize()
                await self.app.start()
                await self.app.updater.start_polling(
                    poll_interval=3.0,
                    drop_pending_updates=True,
                    timeout=20
                )
                await self.app.updater.idle()
            except Exception as e:
                self.restart_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {self.restart_count}/{self.max_restarts}): {e}")
                await asyncio.sleep(5)
            finally:
                await self.app.stop()
                await self.app.shutdown()

        logger.error("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == '__main__':
    bot = BotApplication()
    asyncio.run(bot.run())
