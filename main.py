import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_IDS = [id for id in [os.getenv(f"ADMIN_{i}") for i in range(1, 3)] if id]

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
START, EXPERIENCE, TIME_PER_DAY, MOTIVATION = range(4)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def get_admin_keyboard(applicant_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{applicant_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{applicant_id}")
        ]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    keyboard = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply")]]
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return START

async def apply(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üíº –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    return EXPERIENCE

async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è."""
    context.user_data['experience'] = update.message.text[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    await update.message.reply_text("‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ? (–¶–∏—Ñ—Ä–∞)")
    return TIME_PER_DAY

async def time_per_day(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        hours = float(update.message.text.replace(',', '.'))
        context.user_data['time_per_day'] = f"{hours} —á."
    except ValueError:
        context.user_data['time_per_day'] = update.message.text[:50]
    
    await update.message.reply_text("üéØ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã? (–ö—Ä–∞—Ç–∫–æ)")
    return MOTIVATION

async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º."""
    context.user_data['motivation'] = update.message.text[:300]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    user = update.effective_user

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    application_text = (
        "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user.username or '–Ω–µ—Ç'}\n"
        f"üÜî *ID:* `{user.id}`\n"
        f"üìù *–ò–º—è:* {user.full_name}\n\n"
        f"üíº *–û–ø—ã—Ç:* {context.user_data.get('experience', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚è≥ *–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:* {context.user_data.get('time_per_day', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéØ *–¶–µ–ª—å:* {context.user_data.get('motivation', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    for admin_chat_id in ADMIN_CHAT_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_chat_id,
                text=application_text,
                parse_mode="Markdown",
                reply_markup=get_admin_keyboard(user.id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_chat_id}: {e}")

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    return ConversationHandler.END

async def admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)."""
    query = update.callback_query
    await query.answer()
    
    try:
        action, user_id = query.data.split('_')
        user_id = int(user_id)
        
        if action == "accept":
            response_text = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è."
        else:
            response_text = "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        
        await context.bot.send_message(chat_id=user_id, text=response_text)
        await query.edit_message_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∞: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def post_init(application: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    await application.bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def post_stop(application: Application) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞."""
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
    app = Application.builder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .post_stop(post_stop) \
        .build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º per_message=True
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(apply, pattern="^apply$")
        ],
        states={
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience)],
            TIME_PER_DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, time_per_day)],
            MOTIVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, motivation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=True,  # –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã CallbackQuery
        allow_reentry=True
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_action, pattern=r"^(accept|reject)_\d+$"))
    app.add_handler(CommandHandler('cancel', cancel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(lambda u, c: logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=c.error))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –¥–ª—è Render
    app.run_polling(
        poll_interval=2.0,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Render Free
        drop_pending_updates=True,
        close_loop=False,
        stop_signals=None  # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    )

if __name__ == '__main__':
    main()
