import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler
)
from telegram.helpers import escape_markdown

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
ADMIN_1 = os.getenv("ADMIN_1")  # ID –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_2 = os.getenv("ADMIN_2")  # ID –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = []
for admin_id in [ADMIN_1, ADMIN_2]:
    if admin_id and admin_id.isdigit():
        ADMIN_IDS.append(int(admin_id))

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
START, EXPERIENCE, TIME, MOTIVATION = range(4)

# –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
BOT_ACTIVE = True

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(user_id) in [ADMIN_1, ADMIN_2]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not BOT_ACTIVE:
        await update.message.reply_text("‚è∏ –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        return ConversationHandler.END
        
    keyboard = [[InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_application")]]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return START

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üíº –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    return EXPERIENCE

async def receive_experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø—ã—Ç–µ"""
    context.user_data['experience'] = update.message.text[:200]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    await update.message.reply_text("‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ? (–¶–∏—Ñ—Ä–∞)")
    return TIME

async def receive_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        hours = float(update.message.text.replace(',', '.'))
        if hours <= 0 or hours > 24:
            await update.message.reply_text("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (0-24)")
            return TIME
        context.user_data['time'] = f"{hours:.1f} —á/–¥–µ–Ω—å"
    except ValueError:
        await update.message.reply_text("‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return TIME
    
    await update.message.reply_text("üéØ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?")
    return MOTIVATION

async def receive_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    user = update.effective_user
    context.user_data['motivation'] = update.message.text[:500]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
    try:
        application_text = (
            "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
            f"üë§ *–ò–º—è:* {escape_markdown(user.full_name, version=2)}\n"
            f"üì± *Username:* @{escape_markdown(user.username, version=2) if user.username else '–Ω–µ—Ç'}\n"
            f"üÜî *ID:* `{user.id}`\n\n"
            f"üíº *–û–ø—ã—Ç:* {escape_markdown(context.user_data['experience'], version=2)}\n"
            f"‚è≥ *–í—Ä–µ–º—è:* {escape_markdown(context.user_data['time'], version=2)}\n"
            f"üéØ *–ú–æ—Ç–∏–≤–∞—Ü–∏—è:* {escape_markdown(context.user_data['motivation'], version=2)}"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user.id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user.id}")
            ]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å MarkdownV2
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=application_text,
                    parse_mode="MarkdownV2",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                logger.error(f"MarkdownV2 –æ—à–∏–±–∫–∞ –¥–ª—è {admin_id}: {e}")
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                plain_text = (
                    "üìå –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n\n"
                    f"üë§ –ò–º—è: {user.full_name}\n"
                    f"üì± Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
                    f"üÜî ID: {user.id}\n\n"
                    f"üíº –û–ø—ã—Ç: {context.user_data['experience']}\n"
                    f"‚è≥ –í—Ä–µ–º—è: {context.user_data['time']}\n"
                    f"üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {context.user_data['motivation']}"
                )
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=plain_text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏")

    await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    return ConversationHandler.END

async def admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("‚ö† –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    
    action, user_id = query.data.split('_')
    response = "üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è." if action == "approve" else "üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
    
    try:
        await context.bot.send_message(chat_id=user_id, text=response)
        await query.edit_message_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è: {e}")
        await query.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    await update.message.reply_text("‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def toggle_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    global BOT_ACTIVE
    
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        return
    
    BOT_ACTIVE = not BOT_ACTIVE
    status = "–≤–∫–ª—é—á—ë–Ω" if BOT_ACTIVE else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"üîÑ –ë–æ—Ç {status}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ", exc_info=context.error)
    if update and isinstance(update, Update):
        try:
            await update.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            try:
                await update.callback_query.message.reply_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CallbackQueryHandler(start_application, pattern="^start_application$")
        ],
        states={
            EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_experience)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_time)],
            MOTIVATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_motivation)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_decision, pattern=r"^(approve|reject)_\d+$"))
    app.add_handler(CommandHandler('toggle', toggle_bot))
    app.add_error_handler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
    app.run_polling(
        drop_pending_updates=True,
        poll_interval=3.0,
        close_loop=False,
        stop_signals=[]
    )

if __name__ == '__main__':
    main()
