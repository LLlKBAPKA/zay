from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID_1 = os.getenv("ADMIN_1")
ADMIN_CHAT_ID_2 = os.getenv("ADMIN_2")

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
START, EXPERIENCE, TIME_PER_DAY, MOTIVATION = range(4)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
def admin_keyboard(applicant_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{applicant_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{applicant_id}")]
    ])

# /start ‚Äî –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    button = [[InlineKeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply")]]
    markup = InlineKeyboardMarkup(button)
    await update.message.reply_text(
        "üöÄ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=markup
    )
    return START

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
async def apply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üíº –ë—ã–ª –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ? (–î–∞/–ù–µ—Ç)")
    return EXPERIENCE

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—ã—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è
async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['experience'] = update.message.text
    await update.message.reply_text("‚è≥ –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ? (–¶–∏—Ñ—Ä–∞)")
    return TIME_PER_DAY

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
async def time_per_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['time_per_day'] = update.message.text
    await update.message.reply_text("üéØ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Ä–∞–±–æ—Ç—ã? (–ö—Ä–∞—Ç–∫–æ)")
    return MOTIVATION

# –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
async def motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['motivation'] = update.message.text
    user = update.effective_user

    # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    application_text = (
        "üìå *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user.username} (ID: `{user.id}`)\n"
        f"üìù *–ò–º—è:* {user.full_name}\n\n"
        f"üíº *–û–ø—ã—Ç:* {context.user_data['experience']}\n"
        f"‚è≥ *–í—Ä–µ–º—è –≤ –¥–µ–Ω—å:* {context.user_data['time_per_day']} —á.\n"
        f"üéØ *–¶–µ–ª—å:* {context.user_data['motivation']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º
    for admin_chat_id in [ADMIN_CHAT_ID_1, ADMIN_CHAT_ID_2]:
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=application_text,
            parse_mode="Markdown",
            reply_markup=admin_keyboard(user.id)
        )

    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–º–µ–Ω–∏)
async def admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, user_id = query.data.split('_')

    if action == "accept":
        await query.answer("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
        await context.bot.send_message(
            chat_id=user_id,
            text="üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è."
        )
    elif action == "reject":
        await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await context.bot.send_message(
            chat_id=user_id,
            text="üòï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
        )

    await query.edit_message_reply_markup(reply_markup=None)  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CallbackQueryHandler(apply, pattern="^apply$")],
        states={
            EXPERIENCE: [MessageHandler(filters.TEXT, experience)],
            TIME_PER_DAY: [MessageHandler(filters.TEXT, time_per_day)],
            MOTIVATION: [MessageHandler(filters.TEXT, motivation)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_action, pattern="^(accept|reject)_"))
    app.run_polling()

if __name__ == '__main__':
    main()
